{"version":3,"sources":["components/navigation/NavBar.js","components/table/Row.js","components/table/Table.js","components/pages/Product.js","actions/productAction.js","actions/actionTypes.js","components/navigation/SideBar.js","components/pages/Order.js","reducers/reducer.js","reducers/index.js","store/configureStore.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","Component","Cell","_ref","entry","cellAccessKey","value","Table_Table","key","DataRow","_ref2","metadata","Row","getDataCells","HeaderRow","_ref4","map","_ref3","index","accessKey","header","HeaderCell","getCellHeaders","mdata","Row_Cell","Table","entries","Header","Row_HeaderRow","Body","Row_DataRow","id","Product","this","props","fetchProducts","table_Table_Table","products","connect","state","root","dispatch","fetch","then","response","json","type","payload","SideBar","react_router_dom","to","Order","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","App","es","navigation_NavBar","navigation_SideBar","react_router","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAYeA,kMARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAhB,4BAJaC,uCCCfC,EAAO,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,cACfC,EAAQF,EAAMC,GACpB,OAAOR,EAAAC,EAAAC,cAACQ,EAAA,EAAML,KAAP,CAAYM,IAAKH,GAAgBC,IAGpCG,EAAU,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,SAAUP,EAAYM,EAAZN,MAC3B,OAAOP,EAAAC,EAAAC,cAACQ,EAAA,EAAMK,IAAP,KAAYC,EAAaF,EAAUP,KAQtCU,EAAY,SAAAC,GAAA,IAAGJ,EAAHI,EAAGJ,SAAH,OAChBd,EAAAC,EAAAC,cAACQ,EAAA,EAAMK,IAAP,KANqB,SAAAD,GAAQ,OAC7BA,EAASK,IAAI,SAAAC,EAAwBC,GAAxB,IAAGC,EAAHF,EAAGE,UAAWC,EAAdH,EAAcG,OAAd,OACXvB,EAAAC,EAAAC,cAACQ,EAAA,EAAMc,WAAP,CAAkBb,IAAKW,GAAaD,GAAQE,KAIlCE,CAAeX,KAGvBE,EAAe,SAACF,EAAUP,GAC9B,OAAOO,EAASK,IAAI,SAAAO,GAAS,IACnBJ,EAAcI,EAAdJ,UACR,OAAOtB,EAAAC,EAAAC,cAACyB,EAAD,CAAMhB,IAAKW,EAAWf,MAAOA,EAAOC,cAAec,OCpBxDM,EAAQ,SAAAtB,GAAA,IAAGQ,EAAHR,EAAGQ,SAAUe,EAAbvB,EAAauB,QAAb,OACZ7B,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAcoB,OAAf,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAWjB,SAAUA,KAEvBd,EAAAC,EAAAC,cAACQ,EAAA,EAAcsB,KAAf,KACGH,EAAQV,IAAI,SAAAZ,GAAK,OAChBP,EAAAC,EAAAC,cAAC+B,EAAD,CAAStB,IAAKJ,EAAM2B,GAAIpB,SAAUA,EAAUP,MAAOA,SCNrD4B,+LAEFC,KAAKC,MAAMC,iDAmBX,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,CAAOV,QAASO,KAAKC,MAAMG,SAAU1B,SAftB,CACpB,CACEQ,UAAW,eACXC,OAAQ,gBAEV,CACED,UAAW,eACXC,OAAQ,gBAEV,CACED,UAAW,WACXC,OAAQ,sBAjBMnB,aA8BPqC,cALS,SAAAC,GAEtB,MAAO,CAAEF,SADQE,EAAMC,KAAKH,WAM5B,CAAEF,cCnCyB,kBAAM,SAAAM,GACjCC,MAAM,sBACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAN,GAAQ,OACZI,EAAS,CACPK,KCPsB,iBDQtBC,QAASV,SD2BFC,CAGbN,GGfagB,mLAjBX,OACEnD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAMC,GAAG,SAASlD,UAAU,YAC1BH,EAAAC,EAAAC,cAAA,uBAGJF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAMC,GAAG,WAAWlD,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,iCAXUE,aCEPkD,EAFD,kBAAMtD,EAAAC,EAAAC,cAAA,8CCFdqD,EAAe,CACnBf,SAAU,IAeGgB,EAZC,WAAkC,IAAjCd,EAAiCe,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOX,MACb,IHR0B,iBGSxB,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GACFnB,EADL,CAEEF,SAAUoB,EAAOV,UAErB,QACE,OAAOR,ICXAqB,EAAcC,YAAgB,CAAErB,KAAMa,ICC7CS,EAAmBC,OAAOC,sCAAwCC,IAMzDC,EALDC,YACZP,EACA,GACAE,EAAiBM,YAAgBC,cCsBpBC,mLAjBX,OACEzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAUL,MAAOA,GACfrE,EAAAC,EAAAC,cAACyE,EAAD,MACA3E,EAAAC,EAAAC,cAAA,OAAKgC,GAAG,WACNlC,EAAAC,EAAAC,cAACkD,EAAA,EAAD,KACEpD,EAAAC,EAAAC,cAAC0E,EAAD,MACA5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACE7E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWzB,IACjCtD,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAW5C,eAV/B/B,aCCE4E,QACW,cAA7Bd,OAAOe,SAASC,UAEe,UAA7BhB,OAAOe,SAASC,UAEhBhB,OAAOe,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.0ad22362.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <nav className='navbar navbar-expand navbar-dark bg-dark static-top'>\n        <span className='navbar-brand mr-1'>Order Management</span>\n      </nav>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\n\nconst Cell = ({ entry, cellAccessKey }) => {\n  const value = entry[cellAccessKey];\n  return <Table.Cell key={cellAccessKey}>{value}</Table.Cell>;\n};\n\nconst DataRow = ({ metadata, entry }) => {\n  return <Table.Row>{getDataCells(metadata, entry)}</Table.Row>;\n};\n\nconst getCellHeaders = metadata =>\n  metadata.map(({ accessKey, header }, index) => (\n    <Table.HeaderCell key={accessKey || index}>{header}</Table.HeaderCell>\n  ));\n\nconst HeaderRow = ({ metadata }) => (\n  <Table.Row>{getCellHeaders(metadata)}</Table.Row>\n);\n\nconst getDataCells = (metadata, entry) => {\n  return metadata.map(mdata => {\n    const { accessKey } = mdata;\n    return <Cell key={accessKey} entry={entry} cellAccessKey={accessKey} />;\n  });\n};\n\nexport { HeaderRow, DataRow };\n","import React from 'react';\nimport { Table as SemanticTable } from 'semantic-ui-react';\nimport { DataRow, HeaderRow } from './Row';\n\nconst Table = ({ metadata, entries }) => (\n  <SemanticTable>\n    <SemanticTable.Header>\n      <HeaderRow metadata={metadata} />\n    </SemanticTable.Header>\n    <SemanticTable.Body>\n      {entries.map(entry => (\n        <DataRow key={entry.id} metadata={metadata} entry={entry} />\n      ))}\n    </SemanticTable.Body>\n  </SemanticTable>\n);\n\nexport { Table };\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchProducts } from '../../actions/productAction';\nimport { Table } from '../table/Table';\n\nclass Product extends Component {\n  componentWillMount() {\n    this.props.fetchProducts();\n  }\n\n  render() {\n    const tableMetadata = [\n      {\n        accessKey: 'product_code',\n        header: 'Product Code'\n      },\n      {\n        accessKey: 'product_name',\n        header: 'Product Name'\n      },\n      {\n        accessKey: 'quantity',\n        header: 'Quantity'\n      }\n    ];\n\n    return <Table entries={this.props.products} metadata={tableMetadata} />;\n  }\n}\n\nconst mapStateToProps = state => {\n  const products = state.root.products;\n  return { products };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchProducts }\n)(Product);\n","import { FETCH_PRODUCTS } from './actionTypes';\n\nexport const fetchProducts = () => dispatch => {\n  fetch('/api/getOrderItems')\n    .then(response => response.json())\n    .then(products =>\n      dispatch({\n        type: FETCH_PRODUCTS,\n        payload: products\n      })\n    );\n};\n","export const FETCH_PRODUCTS = 'FETCH_PRODUCTS';\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Product } from '../pages/Product';\n\nclass SideBar extends Component {\n  render() {\n    return (\n      <ul className='sidebar navbar-nav'>\n        <li className='nav-item'>\n          <Link to='/order' className='nav-link'>\n            <span>Order</span>\n          </Link>\n        </li>\n        <li className='nav-item'>\n          <Link to='/product' className='nav-link'>\n            <span>Product</span>\n          </Link>\n        </li>\n      </ul>\n    );\n  }\n}\n\nexport default SideBar;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Table } from '../table/Table';\n\nconst Order = () => <h1>Order</h1>;\n\nexport default Order;\n","import { FETCH_PRODUCTS } from '../actions/actionTypes';\n\nconst initialState = {\n  products: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_PRODUCTS:\n      return {\n        ...state,\n        products: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport reducer from './reducer';\n\nexport const rootReducer = combineReducers({ root: reducer });\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  {},\n  composeEnhancers(applyMiddleware(thunk))\n);\nexport default store;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport NavBar from './components/navigation/NavBar';\nimport SideBar from './components/navigation/SideBar';\nimport Order from './components/pages/Order';\nimport Product from './components/pages/Product';\nimport { Provider } from 'react-redux';\nimport store from './store/configureStore';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <NavBar />\n        <div id='wrapper'>\n          <Router>\n            <SideBar />\n            <Switch>\n              <Route path='/orders' component={Order} />\n              <Route path='/products' component={Product} />\n            </Switch>\n          </Router>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './css/sb-admin.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}